// The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

// Given an integer n, return the number of distinct solutions to the n-queens puzzle.

//Solution

class Solution {
public:
    int totalNQueens(int n) {
        vector<vector<string>> ans;
        
        vector<string> board(n);
        
        string s(n,'.');
        for(int i=0; i<n; i++){
            board[i]=s;
        }
        
        solve(0,board,ans,n);
        int count=ans.size();
        return count;
        
    }
    
public:
    void solve(int col, vector<string> & board, vector<vector<string>> & ans,int n){
     if(col==n){
         ans.push_back(board);
         //count+=1;
         return;
     }
        
     for(int row=0; row<n; row++){
         if(isSafe(row,col,board,n)){
             board[row][col]='Q';
             solve(col+1,board,ans,n);
             board[row][col]='.';
         }
     }
}
    
    bool isSafe(int row, int col, vector<string> board, int n){
        int i,j;
        
        for(i=col; i>=0; i--){
            if(board[row][i]=='Q')
                return false;
        }
        
        for(i=row,j=col; i>=0 && j>=0; i--,j--){
            if(board[i][j]=='Q')
                return false;
        }
        
        for(i=row,j=col; i<n && j>=0; i++,j--){
            if(board[i][j]=='Q')
                return false;
        }
        
        return true;
    }


};
